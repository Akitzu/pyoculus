########################################
# SPECProblem.py: setup the SPEC system for oculus ODE solver
# written by @zhisong (zhisong.qu@anu.edu.au)
#
from .SPECfortran import fortran_module
from .BaseProblem import BaseProblem
import numpy as np

class SPECProblem(BaseProblem):

    """
    Abstract class that used to setup the SPEC system for interfacing Fortran, used in ODE solver.
    Call signature:
        spec_problem = SPECProblem(spec_data, lvol) 
    """

    def __init__(self, spec_data, lvol):
        '''Set up the equilibrium for use of the fortran module 
        parameters:
            spec_data -- the SPEC data generated by py_spec.SPEC
            lvol -- which volume we are interested in, from 1 to spec_data.input.Mvol
        '''

        self.fortran_module = fortran_module

        # check the version of SPEC output file. Only >=2.2 is accepted
        if (spec_data.version < 2.2):
            raise Exception('SPEC version >=2.2 is needed')

        # setting up the fortran module
        fortran_module.variables.mvol = spec_data.output.Mvol
        fortran_module.variables.ntor = spec_data.input.physics.Ntor
        fortran_module.variables.mpol = spec_data.input.physics.Mpol
        fortran_module.variables.igeometry = spec_data.input.physics.Igeometry
        fortran_module.variables.mn = spec_data.output.mn
        fortran_module.variables.notstellsym = (spec_data.input.physics.Istellsym == 0)
        fortran_module.variables.nfp = spec_data.input.physics.Nfp
        fortran_module.variables.im = spec_data.output.im
        fortran_module.variables.in1 = spec_data.output.in1

        fortran_module.variables.irbc = spec_data.output.Rbc.T
        fortran_module.variables.izbc = spec_data.output.Zbc.T
        fortran_module.variables.irbs = spec_data.output.Rbs.T
        fortran_module.variables.izbs = spec_data.output.Zbs.T

        # saving some quantities for self as well
        self.Mvol = spec_data.output.Mvol
        self.Ntor = spec_data.input.physics.Ntor
        self.Mpol = spec_data.input.physics.Mpol
        self.Igeometry = spec_data.input.physics.Igeometry
        self.NOTstellsym = (spec_data.input.physics.Istellsym == 0)
        self.Nfp = spec_data.input.physics.Nfp

        if (lvol > 0 and lvol <= spec_data.output.Mvol):
            # setting up the fortran module
            fortran_module.variables.ivol = lvol
            fortran_module.variables.lrad = spec_data.input.physics.Lrad[lvol-1]
            fortran_module.variables.ate = spec_data.vector_potential.Ate[lvol-1].T
            fortran_module.variables.ato = spec_data.vector_potential.Ato[lvol-1].T
            fortran_module.variables.aze = spec_data.vector_potential.Aze[lvol-1].T
            fortran_module.variables.azo = spec_data.vector_potential.Azo[lvol-1].T
            fortran_module.variables.lcoordinatesingularity = (spec_data.input.physics.Igeometry>=2 and lvol==1)
            
            # saving some quantities for self as well
            self.ivol = lvol
            self.Lrad = spec_data.input.physics.Lrad[lvol-1]
            self.Lcoordinatesingularity = (spec_data.input.physics.Igeometry>=2 and lvol==1)

        else:
            raise Exception('Volume number lvol out of bound')

