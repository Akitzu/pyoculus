########################################
# SPECPJH.py: setup the SPEC Bfield system for oculus ODE solver
# written by @zhisong (zhisong.qu@anu.edu.au)
#
from .SPECProblem import SPECProblem

class SPECPJH(SPECProblem):
    """
    Class that used to setup the SPEC PJH problem for interfacing Fortran, used in ODE solver.
    Call signature:
        spec_pjh = SPECPJH(spec_data, lvol) 

    Contains:
        f - function to compute the RHS of the ODE
        f_tangent - function to compute the RHS of the ODE, with tangent
        coords_convert - function that converts curvilinear coordinates to real coordinates
    """
    problem_size = 2
    poincare_plot_type = 'yx'

    def __init__(self, spec_data, lvol):
        '''Set up the equilibrium for use of the fortran module 
        parameters:
            spec_data -- the SPEC data generated by py_spec.SPEC
            lvol -- which volume we are interested in, from 1 to spec_data.input.Mvol
        '''
        super().__init__(spec_data, lvol)

    def f(self, zeta, st, arg1=None):
        '''Python wrapper for pjh ODE RHS 
        parameters:
            zeta -- the zeta coordinate
            st -- array size 2, the (s, theta) coordinate
            arg1 -- parameter for the ODE, not used here

        return:
            array size 2, the RHS of the ODE
        '''
        #return self.fortran_module.bfield.get_bfield(zeta, st)

    def f_tangent(self, zeta, st, arg1=None):
        '''Python wrapper for pjh ODE RHS, with RHS
        parameters:
            zeta -- the zeta coordinate
            st -- array size 6, the (s, theta, ds1, dtheta1, ds2, dtheta2) coordinate
            arg1 -- parameter for the ODE, not used here

        return:
            array size 6, the RHS of the ODE
        '''
    #return self.fortran_module.bfield.get_bfield_tangent(zeta, st)

    def convert_coords(self, stz):
        '''Python wrapper for getting the xyz coordinates from stz
        parameters:
            stz -- the stz coordinate

        return:
            the xyz coordinates
        '''
        # we don't need any conversion for PJH
        return stz