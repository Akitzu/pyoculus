## @file SPECPJH.py
#  @brief Setup the SPEC Bfield system for oculus ODE solver
#  @author Zhisong Qu (zhisong.qu@anu.edu.au)
#
from .SPECProblem import SPECProblem
import numpy as np

## Class that used to setup the SPEC PJH problem for interfacing Fortran, used in ODE solver.
# For more detail in physics, see the SPEC fortran module \ref specpjh
# 
# Please note that in the Fortran module, \f$\zeta\f$ is equivalent to \f$\varphi\f$.
class SPECPJH(SPECProblem):

    problem_size = 2                 # the size of the problem, 2 for 1.5 or 2D system
    poincare_plot_type = 'yx'        # choose the variable for Poincare plot
    poincare_plot_xlabel = 'theta'   # the x label of Poincare plot
    poincare_plot_ylabel = 'p_theta' # the y label of Poincare plot

    ## Set up the equilibrium for use of the fortran module 
    # @param spec_data the SPEC data generated by py_spec.SPEC
    # @param lvol which volume we are interested in, from 1 to spec_data.input.Mvol
    # @param dp the \f$\delta p\f$ for PJH
    # @param innout 0 for inner surface, 1 for outer surface of the volume specified by lvol
    # @param plusminus -- the sign for computing p_zeta, +1 or -1
    def __init__(self, spec_data, lvol, dp=0.0, innout=0, plusminus=+1):

        super().__init__(spec_data, lvol)

        self.fortran_module.specpjh.init_pjh(dp, innout, plusminus)
        self.dp = dp
        self.innout = innout
        self.plusminus = plusminus
        self.initialized = True

    ## Set up the parameters for the pjh fortran module 
    # @param dp the delta p for PJH
    # @param innout 0 for inner surface, 1 for outer surface for the volume specified by lvol
    # @param plusminus the sign for computing \f$p_\zeta\f$, +1 or -1
    def set_PJH_parameters(self, dp=0.0, innout=0, plusminus=+1):

        self.fortran_module.specpjh.init_pjh(dp, innout, plusminus)

    ## Python wrapper for pjh ODE RHS 
    # @param zeta the \f$\zeta\f$ coordinate
    # @param st array size 2, the \f$(s, \theta)\f$ coordinate
    # @param arg1 -- parameter for the ODE, not used here
    # @returns array size 2, the RHS of the ODE
    def f(self, zeta, st, arg1=None):

        return self.fortran_module.specpjh.get_pjhfield(zeta, st)

    ## Python wrapper for pjh ODE RHS, with tangent 
    # @param zeta the \f$\zeta\f$ coordinate
    # @param st array size 2, the \f$(p_\theta, \theta)\f$ states
    # @param arg1 -- parameter for the ODE, not used here
    # @returns array size 2, the RHS of the ODE
    def f_tangent(self, zeta, st, arg1=None):

        return self.fortran_module.specpjh.get_pjhfield_tangent(zeta, st)

    ## Python wrapper for getting the xyz coordinates from stz (identity for PJH)
    # @param stz the stz coordinate
    # @returns the xyz coordinates
    def convert_coords(self, stz):

        return np.array([stz[0], np.mod(stz[1], 2.0*np.pi), np.mod(stz[2], 2.0*np.pi)], dtype=np.float64)

    ## Get the value of \f$B_\theta\f$ and \f$B_\zeta\f$ on the known interface
    # @param theta  the \f$\theta \f$ coordinate
    # @param zeta   the \f$\zeta  \f$ coordinate
    # @returns (\f$ B_\theta, B_\zeta \f$)
    #
    def get_covariant_field(self, theta, zeta):

        return self.fortran_module.specpjh.get_covariant_field(theta, zeta)