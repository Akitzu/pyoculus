## @file SPECBfield.py
#  @brief Setup the SPEC magnetic field system for oculus ODE solver
#  @author Zhisong Qu (zhisong.qu@anu.edu.au)
#
from .SPECProblem import SPECProblem
import numpy as np

## Class that used to setup the SPEC bfield problem for interfacing Fortran, used in ODE solver. 
# See \ref specbfield for more details.
#
# The SPECBfield system of ODEs is given by
# \f[ \frac{ds}{d\zeta} = \frac{B^{s}}{B^{\zeta}}  \f]
# \f[ \frac{d\theta}{d\zeta} = \frac{B^{\theta}}{B^{\zeta}}  \f]
class SPECBfield(SPECProblem):

    ## the problem size, 2 for 1.5D/2D Hamiltonian system
    problem_size = 2

    ## by default plotting the RZ plane
    poincare_plot_type = 'RZ'
    ## by default x axis has label R
    poincare_plot_xlabel = 'R(m)'
    ## by default y axis has label Z
    poincare_plot_ylabel = 'Z(m)'

    ## Set up the equilibrium for use of the fortran module
    #
    # @param spec_data the SPEC data generated by py_spec.SPEC
    # @param lvol which volume we are interested in, from 1 to spec_data.input.Mvol
    def __init__(self, spec_data, lvol):

        super().__init__(spec_data, lvol)
        if self.Igeometry == 1:
            self.poincare_plot_type = 'yx'
            self.poincare_plot_xlabel = 'theta'
            self.poincare_plot_ylabel = 'R'
        elif self.Igeometry == 2:
            pass
        elif self.Igeometry == 3:
            pass
        else:
            raise ValueError('Unknown Igeometry!')

    ## Python wrapper for magnetic field ODE RHS
    #
    # @param zeta the zeta coordinate
    # @param st   array size 2, the (s, theta) coordinate
    # @param arg1 parameter for the ODE, not used here
    #
    # @returns    array size 2, the RHS of the ODE
    def f(self, zeta, st, arg1=None):

        return self.fortran_module.specbfield.get_bfield(zeta, st)

    ## Python wrapper for magnetic field ODE RHS, with RHS
    # @param zeta the zeta coordinate
    # @param st   array size 6, the (s, theta, ds1, dtheta1, ds2, dtheta2) coordinate
    # @param arg1 parameter for the ODE, not used here
    def f_tangent(self, zeta, st, arg1=None):

        return self.fortran_module.specbfield.get_bfield_tangent(zeta, st)

    ## Python wrapper for getting the xyz coordinates from stz
    # @param stz  the stz coordinate
    #
    # @returns the xyz coordinates
    def convert_coords(self, stz):

        xyz = self.fortran_module.speccoords.get_xyz(stz)
        
        # depending on the geometry, return RZ or yx
        if self.Igeometry == 1:
            # for a slab, return x=R, y=theta, z=zeta
            return np.array([xyz[0], np.mod(stz[1],2*np.pi)*self.rpol, np.mod(stz[2],2*np.pi)*self.rtor], dtype=np.float64)
        if self.Igeometry == 2:
            # for cylinderical geometry, return x=r*cos theta, y=zeta*rtor, z=sin theta
            return np.array([xyz[0]*np.cos(stz[1]), stz[2]*self.rtor, xyz[0]*np.sin(stz[1])], dtype=np.float64)
        if self.Igeometry == 3:
            # for toroidal geometry, return x=R, y=zeta, z=Z
            return xyz
